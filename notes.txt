NODE TUTORIAL 
///////

node  js   is the run  environment  that runs   outside of the browser 
1 you dont have the access  to  browser  api  aka   no  dom  
2 server side apps 
3 versions 
4  common js   is  used not the  es6
5  but you can  access  network  system  and the operating   system
6 how do  we get  node to evaluate  our code ?  
                 :repl or  cli   


//////////GLOBAL :
in vanilla  you can work  with  the window object
global definition :   anywhere  in your  application  you access them

those  globals are   : 
    1  __dirname   -  path to current directory 
    2  __filename   -    fila name 
    3  require   -   function to  use  modules 
    4  module    -  info  about  current  module  or file  
    5   procces    -  info about the  env the porgramm is   being executed 

in  the file type the log(__dirname)  for example     
=  '  node filename.js '   in the terminal


also  we have setinterval  


////////////////////////   MODULES 
you do  execute   only one  file   but your code is splitted  in many files 
so for that you need the modules

in common   js every  file is the module 
modules  are encapsulated pieces of code

the idea  behind the object  that any  you  put into  global object
'module'  you can  access  from  anywhere in the porgramm


require()   -    means  import here the code from  wanted module
you  also  can  export many  objects by  putting them  all into  the object 


but the fucntion  is invoked  inside of the file than it becomes global even  if 
you dont export it 
it will  be executed if  you write require but you cant invoke it 
it  will be run  automatically


////////////////////////////BUILT IN   MODULES:
OS 
https
FS 
PATH 

fs module  is the 'file system'


const os  =  require('os')    ///  this is how do it without ./  in directory

//////////////////////////////////////////
///////////////////////////////////////


path  

const   path  =  require('path');
const filePath =   path.join('./content' ,  'subcontent' ,   'text.txt')
log(filePath)


console.log(path.basename(filePath));///    prints  just  the nmae of the file 
we also  often  need to  provide  the absolute path 


const path   =  require('path')
console.log(path.sep);

const filePath =   path.join('./content' ,  'subfolder' ,   'text.txt')
console.log(filePath);

console.log(path.basename(filePath));///    prints  just  the nmae of the file 
const  absolute  =   path.resolve(__dirname)   //  dirname  shows  our current directory 
console.log(absolute);



 ////////////////   fs    
 
const fs  =   require('fs')
const  first  =   fs.readFileSync('./content/subfolder/firstTextFile.txt' ,   'utf8');//  two  params :  path  and  encoding 
console.log(first);    //  this is   how you  can  read txt files 


writefileSync   method   goes to specific  folder  and 
if nothing  is there  it creates the file 
and  if the file is there it overrides it 



fs.writeFileSync('./content/subfolder/writtenfile.txt' ,    'this  is  written  file created  by  the writeFileSync  function ');



now it is  time for async FS  methods: 
   
   const fs  =   require('fs')
fs.readFile('./content/subfolder/text.txt' , (err ,   result)=>{
if(err){
    console.log(err);
    return
}
console.log(result);
})

//it will not return  the text but the buffer
//  because  we have to provide  'utf8'  between  path  and the callback



/////////////////////////////////
INTRODUCTION  TO  HTTP   
//////////////////////////



NPM :






///////////////////////////////
EVENT LOOP
//////////////////////////


we   run    immediate   tasks first   and  only then   the async  code 

it  manages the  time  so  we  dont  wait long  operation's  end 
and we   can  do  other  tasks  instead 
while  event  loop   works with  the long lasting operation
 

 const   fs   =   require('fs');
fs.readFile('./content/subfolder/firstTextFile.txt' ,  'utf8',  (err   ,  result)=>{
    //readfile is async  function 
    if(err){
        console.log(err);
        return 

    }
    console.log(result);
    console.log('we cmpleted reading the file');
})

console.log('next task');




//   in  abover  ex   next  task  will  be  executed  first



blocking  code for the async porgramm


why  do we  even  need the async  code?
   it is   because  some  code  might block  you programm  
   and the whole sever  will  suffer from  const  fs  =   require('fs')

const getText =  (path)=>{
    return new Promise((resolve   , reject)=>{
        fs.readFile(path,   'utf8'  ,  (error   , result)=>{
            if(error){
                reject(error)
            }
            else {
                resolve(result)
            }
        }) 
        
    }
    ) 
}

getText('./content/subfolder/firstTextFile.txt').then(result=>console.log(result)).catch(error=>console.log(error))
it  and  not  only 
   one url 
   so that is  why you  nedd async  
   so   it  does not wait  untill  that  blocking  long  programm to finish 
   and start  running other  programms 







or  another way  to  do  it is  to   use  async  await


getText  is the  promise  abd instead  of that : 




getText('./content/subfolder/firstTextFile.txt').then(result=>console.log(result)).catch(error=>console.log(error))


try  that  async  await   method   : 
  

const  start  =  async()=>{
    const  dat  =    await  getText('./8content/subfolder/firstTextFile.txt')
     console.log(dat);   
}


start();


//  in this  ex   getText  is the promise   and this  is  how async await  works  with  
promises




there is the module  that deals  with  proises  

this  module is called utils


3.08




const  util    =   require('util')
const  fs  =   require('fs')

const readFile =   util.promisify(fs.readFile)

const  start  =  async()=>{
    const  dat  =    await     readFile('./content/subfolder/firstTextFile.txt' ,  'utf8')
    
     console.log(dat);   
}


start();




//////////////////////////////////
EVENTS   
//////////////////////////////////



const  eventEmmiter =   require('events')    
const   customEmitter =   new  eventEmmiter();//  we  first create the instance of the class 'events'
//  on    
//  emmit 
//  are  two obbject  we are intersted the most

customEmitter.on('response',  ()=>{           //   then   we invoke "on"  method
    console.log('data  is recieved');
})


customEmitter.emit('response')              //   and then emit




 ///  emit   means  we  can use whatever in   "on "   method
 //   you  can  have as  many "on "    methods  as you want     
 //   and  emitting   them you will invoke  all them
 //   the order  matters :   
                     1    we first "on"    and  only  then  we "emit "  it

 //    we can  arguments   in   "emit "method
    //  like  that:


 customEmitter.on('response',  (  name  ,  age)=>{           //   then   we invoke "on"  method
    console.log('data  is recieved');

    console.log('the name is  '+   name    +   'and the age is '+   age);
})


customEmitter.emit('response')              //   and then emit
customEmitter.emit('response' ,  "john" ,    34)




const   http  =   require('http')
const  server   =  http.createServer()
server.on('request' ,   (req , res)=>{    //   when  server  is  on  you  can use event

    res.end('hello    request   event')       //    request is the built in   event
})


server.listen(5000)



//////////////////////////
STREAMS
//////////////////////////
we have  4 types of streams  
           :
           writable
           readable
           duplex
           transform




           ////////////////////

HOW  WEB   WORKS   ?   
          /////////////////// 
            evry  time   you  visit  url  you  do  kind  of the request 
            and server    answers  to   request  with  response 
            it is done  with http  protocol 







//////////////////////////////http   basics

const   http  =   require('http')
const  server   =  http.createServer((req , res)=>{
    ///   by  reaaching the 'req'   we  can access  all the information
    about the  request


    PORT  :
        we  have  many PORTS
        'end '  method  should  be  used  in  evry  response




res.writeHead(200,  {'content-type' :  'html'})        // this is  hpw you can  pass the data 
res.end('<h1>hello world </h1>')                       //   by  providing content-type  :   and the type  of data  that you want to send




///HTTP    status code is just  number  to  say  you whether  it is successful  of not and thats it
//   in response you have to provide the  status  code in case if you want to  let know about the network  status
//  so if it s 404   the user will know that page was not found 
//  by  reaching the  req  object  you  will know a lot of info  about the  request 




const  server   =  http.createServer((req , res)=>{

res.writeHead(200,  {'content-type' :  'html'})    
const url   =   req.url;
console.log(url);

if (url==='/about'){
res.end('thisis the about page')

}
if(url==='/contacts'){
     res.writeHead(404)
     res.end('page is not found 404 ')
}
})



//  as well as you can  do  that manipulation 
4.37





how  to render   an  html file in response   method in   http




////////EXPRESSSSSS
///////////////////
main  methods  are : 
                     1   get 
                     2   post 
                     3  put 
                     4  listen 
                     5   delete
                     6   all
                     7   use
                     


const express = require('express')
const path  =    require('path')

const app = express()
app.use(express.static('./frontend'))





app.listen(5000)
//    methods in  expresss   are  kind  can get the callbacks 
//get post  put delete manage   http
//  use  is  responsible  for   middleware 
//  the  order   matters  in   express 
//  static   resources   :  
//            we can use bu   using  'use '  nethod and  then 
//            express  will import all the static files
//  how to render  the html file :  
                   //    we have to use path and 'join  '  method

   //   static  file is the sort  of file that  server  does not have to change 
   //other ways to  send the html  file is : 
                              //   1    make  it  static
                              //   2    use template  engine
     //   we basically  use  express for  two  purposes   :  
                                     //     1    setup  api
                                     //     2    server side rendering     




   //for  exmaple  api  is the interation via  the  'json'   
   //  server  side  rendring  aka  ssr  is  used to render whole css and js  and html  files
   //res.json   for   api   and re.render()  for   ssr
   






